x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

x-restart-policy: &restart-policy
  deploy:
    restart_policy:
      condition: on-failure
      delay: 10s
      max_attempts: 3
      window: 120s

services:
  broker:
    image: confluentinc/cp-kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092" # Expose Kafka broker port
      - "9101:9101" # JMX port for monitoring
    environment:
      # Unique Node ID
      KAFKA_NODE_ID: 1

      # Define security protocol for each listener
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"

      # Advertised listeners for broker (internal network) and external access (localhost)
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092"

      # Replication and state log configuration for Kafka topics
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

      # Reduces the initial rebalance delay to make group rebalancing faster
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      # JMX settings for monitoring Kafka
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost

      # Specify the roles for the node (broker + controller)
      KAFKA_PROCESS_ROLES: "broker,controller"

      # Define controller quorum voters (KRaft mode)
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:29093"

      # Define listeners (PLAINTEXT for the broker, CONTROLLER for the KRaft controller)
      KAFKA_LISTENERS: "PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092"

      # Inter-broker communication is via PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"

      # The controller will listen on the CONTROLLER protocol
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"

      # Directory to store log data
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"

      # KRaft mode requires a unique CLUSTER_ID
      # Use "bin/kafka-storage.sh random-uuid" to generate this value.
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk" # Replace with a generated UUID
    networks:
      - app_network
    healthcheck:
      <<: *healthcheck-defaults
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "broker:29092",
        ]
    <<: *restart-policy

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9999:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
    networks:
      - app_network
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080"]
    <<: *restart-policy
    depends_on:
      broker:
        condition: service_healthy

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:29092"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - app_network
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
    <<: *restart-policy
    depends_on:
      broker:
        condition: service_healthy

  mongo_scrape_service:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_scrape_service_data:/data/db
    networks:
      - app_network
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
    <<: *restart-policy

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    command:
      - --kafka.server=broker:29092
      - --web.listen-address=:9308
    ports:
      - "9308:9308"
    restart: on-failure
    networks:
      - app_network
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9308/metrics"]
    <<: *restart-policy
    depends_on:
      broker:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - app_network
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
    <<: *restart-policy
    depends_on:
      kafka-exporter:
        condition: service_healthy

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3333:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - app_network
    healthcheck:
      <<: *healthcheck-defaults
      test:
        ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
    <<: *restart-policy
    depends_on:
      prometheus:
        condition: service_healthy

  news_service:
    hostname: news_service
    container_name: news_service
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    environment:
      - MONGO_URI=mongodb://mongo_scrape_service:27017/
      - KAFKA_BROKER=broker:29092
      - PORT=50051
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
    networks:
      - app_network
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "grpc-health-probe", "-addr=:50051"]
      # Alternative HTTP health check if gRPC health check is not implemented
      # test: ["CMD", "wget", "--spider", "-q", "http://localhost:50051/health"]
    <<: *restart-policy
    depends_on:
      mongo_scrape_service:
        condition: service_healthy
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
volumes:
  mongo_scrape_service_data:
  volume1:
  grafana-storage:

networks:
  app_network:
    external: true
